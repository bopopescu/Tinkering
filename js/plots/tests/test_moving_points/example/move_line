<!DOCTYPE html>
<meta charset="utf-8">
<title>Spline Editor</title>
<style>

body {
  font: 13px sans-serif;
  position: relative;
  width: 960px;
  height: 500px;
}

form {
  position: absolute;
  bottom: 10px;
  left: 10px;
}

rect {
  fill: none;
  pointer-events: all;
}

circle,
.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

circle {
  fill: #fff;
  fill-opacity: .2;
  cursor: move;
}

.selected {
  fill: #ff7f0e;
  stroke: #ff7f0e;
}

</style>
<form>
  <label for="interpolate">Interpolate:</label>
  <select id="interpolate"></select><br>
</form>
<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
<script>

var width = 960,
    height = 500;

var dataset = d3.range(1, 5).map(function(i) {
  return [i * width / 5, 50 + Math.random() * (height - 100)];
});

make_plot = function(dataset, width, height) {
  alert('beginning')
    var self = this;
    this.dataset = dataset;
    this.width = width;
    this.height = height;

    this.dragged = null ;
    this.selected = this.dataset[0];

   this.line = d3.svg.line();

    this.svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("tabindex", 1);

    this.svg.append("rect")
        .attr("width", width)
        .attr("height", height)
        .on("mousedown", self.mousedown);

    this.svg.append("path")
        .data(this.dataset)
        .attr("class", "line")
        .call(self.update);

    d3.select(window)
        .on("mousemove", self.mousemove)
        .on("mouseup", self.mouseup)
        .on("keydown", self.keydown);

    d3.select("#interpolate")
        .on("change", self.change)
      .selectAll("option")
        .data([
          "linear",
          "step-before",
          "step-after",
          "basis",
          "basis-open",
          "basis-closed",
          "cardinal",
          "cardinal-open",
          "cardinal-closed",
          "monotone"
        ])
      .enter().append("option")
        .attr("value", function(d) { return d; })
        .text(function(d) { return d; });

    this.svg.node().focus();
}


make_plot.prototype.update = function (){
  var self = this;

  self.svg.select("path").attr("d", self.line);

  var circle = self.svg.selectAll("circle")
      .data(self.dataset, function(d) { return d; });

  circle.enter().append("circle")
      .attr("r", 1e-6)
      .on("mousedown", function(d) { self.selected = self.dragged = d; self.update(); })

  circle
      .classed("selected", function(d) { return d === self.selected; })
      .attr("cx", function(d) { return d[0]; })
      .attr("cy", function(d) { return d[1]; });

  circle.exit().remove();

  if (d3.event) {
    d3.event.preventDefault();
    d3.event.stopPropagation();
  }
} // end update

make_plot.prototype.change = function() {
  var self = this;
  self.line.interpolate(function(){
    alert(this.value);
    return this.value;
    });
  self.update();
}

make_plot.prototype.mousedown = function() {
  var self = this;
  self.dataset.push(self.selected = self.dragged = d3.mouse(self.svg.node()));
  self.update();
} // end mousedown

function mousemove() {
  var self = this;
  if (!self.dragged) return;
  var m = d3.mouse(self.svg.node());
  self.dragged[0] = Math.max(0, Math.min(self.width, m[0]));
  self.dragged[1] = Math.max(0, Math.min(self.height, m[1]));
  self.update();
}

make_plot.prototype.mouseup = function() {
  var self = this;
  if (!self.dragged) return;
  self.mousemove();
  self.dragged = null;
}

make_plot.prototype.keydown = function() {
  var self = this;
  if (!self.selected) return;
  switch (d3.event.keyCode) {
    case 8: // backspace
    case 46: { // delete
      var i = self.dataset.indexOf(self.selected);
      self.dataset.splice(i, 1);
      self.selected = self.dataset.length ? self.dataset[i > 0 ? i - 1 : 0] : null;
      self.update();
      break;
    }
  }
}


make_plot(dataset, width, height)

</script>
